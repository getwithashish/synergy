{"mappings":"AAAA,gBAAgB;AAChB,SAAS,iBAAiB,QAAgB;IACxC,6DAA6D;IAC7D,MAAM,QAAQ;IACd,OAAO,MAAM,IAAI,CAAC;AACpB;AAEA,0FAA0F;AAC1F,qFAAqF;AAErF,SAAS,iBAAiB,QAAgB;IACxC,MAAM,QAAQ;IACd,OAAO,MAAM,IAAI,CAAC;AACpB;AAEA,8FAA8F;AAC9F,8CAA8C;AAC9C,8CAA8C;AAC9C,gCAAgC;AAChC,2DAA2D;AAE3D,SAAS,cAAc,KAAa;IAClC,MAAM,QAAQ;IACd,OAAO,MAAM,IAAI,CAAC;AACpB;AAEA,sCAAsC;AACtC,6FAA6F;AAC7F,qCAAqC;AACrC,6FAA6F;AAC7F,sCAAsC;AACtC,8HAA8H;AAE9H,IAAI,SAAmB,iBAAiB;AAExC,IAAG,UAAQ,MACT,QAAQ,GAAG,CAAC;KAGZ,QAAQ,GAAG,CAAC;AAGd,iBAAiB;AACjB,IAAI,QAAgB;AAEpB,IAAI,cAAc,QAChB,QAAQ,GAAG,CAAC;KAEZ,QAAQ,GAAG,CAAC;CAId,qCAAqC;CAErC,mDAAmD;CACnD,qCAAqC;CACrC,IAAI;CAEJ,oBAAoB;CACpB,6CAA6C;CAC7C,8BAA8B;CAC9B,wCAAwC;CACxC,WAAW;CACX,0CAA0C;CAC1C,IAAI","sources":["src/validation.ts"],"sourcesContent":["// validation.ts\r\nfunction validateFullName(fullName: string): boolean {\r\n  // Allow letters, spaces, and optional hyphens or apostrophes\r\n  const regex = /^[a-zA-Z' -]+$/;\r\n  return regex.test(fullName);\r\n}\r\n\r\n// It uses a regular expression (regex) to check if the username consists of alphanumeric \r\n// characters, underscores, or hyphens, and has a length between 4 and 20 characters.\r\n\r\nfunction validatePassword(password: string): boolean {\r\n  const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n  return regex.test(password);\r\n}\r\n\r\n// It uses a regular expression (regex) to check if the password meets the following criteria:\r\n// At least one lowercase letter ((?=.*[a-z]))\r\n// At least one uppercase letter ((?=.*[A-Z]))\r\n// At least one digit ((?=.*\\d))\r\n// Overall length is at least 8 characters ([a-zA-Z\\d]{8,})\r\n\r\nfunction validateEmail(email: string): boolean {\r\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return regex.test(email);\r\n}\r\n\r\n// ^: Asserts the start of the string.\r\n// [^\\s@]+: Matches one or more characters that are not whitespace (\\s) or the at symbol (@).\r\n// @: Matches the at symbol directly.\r\n// [^\\s@]+: Matches one or more characters that are not whitespace (\\s) or the at symbol (@).\r\n// \\.: Matches a literal dot (period).\r\n// [^\\s@]+$: Matches one or more characters that are not whitespace (\\s) or the at symbol (@) until the end of the string ($).\r\n\r\nlet result : boolean = validateUsername(\"arjunnnnnnn\");\r\n\r\nif(result==true) {\r\n  console.log(\"valid username\");\r\n}\r\nelse{\r\n  console.log(\"invalid password\")\r\n}\r\n\r\n// Example usage:\r\nlet email: string = \"exampleemail.fghnj\";\r\n\r\nif (validateEmail(email)) {\r\n  console.log(\"Valid email address\");\r\n} else {\r\n  console.log(\"Invalid email address\");\r\n}\r\n\r\n\r\n// import validator from \"validator\";\r\n\r\n// function validateEmail(email: string): boolean {\r\n//   return validator.isEmail(email);\r\n// }\r\n\r\n// // Example usage:\r\n// let email: string = \"example@email.fghnj\";\r\n// if (validateEmail(email)) {\r\n//   console.log(\"Valid email address\");\r\n// } else {\r\n//   console.log(\"Invalid email address\");\r\n// }\r\n\r\n"],"names":[],"version":3,"file":"index.ea1d33d6.js.map","sourceRoot":"/__parcel_source_root/"}